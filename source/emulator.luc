module emulator (
    input clk,  // clock
    input rst,  // reset
    input alufn[6],
    input wb,
    input wl,
    input ws,
    input rstb,
    input rstl,
    input rsts,
    input bsel,
    input asel[3],
    output display[16],
    output sqc[4],
    output lvl[2],
    output eq[16]
    
  ) {
  mux_2 muxBoard;
  mux_5 muxLevel;
  mux_2 muxSequence;
  mux_5 muxA;
  mux_2 muxB;
  rom myRom;
  alu myalu;
  .clk(clk) {
    .rst(rst) {
      register board;
      register level;
      register sequence;
    }
  }
  
  always {
    muxA.a = myRom.out;
    muxA.b = 16b1;
    muxA.c = 16100;
    muxA.d = 16b0000011001100000;
    muxA.e = 16b0;
    muxA.sel = asel;
    
    muxB.a = board.out;
    muxB.b = sequence.out;
    muxB.sel = bsel;
    
    myalu.a = muxA.out;
    myalu.b = muxB.out;
    myalu.alufn = alufn;
    
    eq = myalu.c;
    
    muxBoard.a = myalu.c;
    muxBoard.b = 16b000000000000001;
    muxBoard.sel = rstb;
    
    muxLevel.a = 16b0;
    muxLevel.b = 16b1;
    muxLevel.c = 16b10;
    muxLevel.d = 16b11;
    muxLevel.e = 16b0;
    muxLevel.sel = rstl;
    
    muxSequence.a = myalu.c;
    muxSequence.b = 16b0;
    muxSequence.sel = rsts;
    
    board.write = wb;
    board.value = muxBoard.out;
    
    level.write = wl;
    level.value = muxLevel.out;
    
    lvl = level.out[1:0];
    
    sequence.write = ws;
    sequence.value = muxSequence.out;
    
    sqc = sequence.out[3:0];
    
    myRom.address = c{level.out[1:0],sequence.out[3:0]};
    
    display = board.out;
    
  }
}