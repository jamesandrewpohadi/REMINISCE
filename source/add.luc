module add (
    input alufn[6],
    input a[16],
    input b[16],
    output led[8],
    output c[16],
    output z,
    output v,
    output n
  ) {
  sig sum[16];

  always {
    c=16b0;
    z=0;
    v=0;
    n=0;
    sum = 16b0;
    led[7:6] = 2b0;
    case (alufn[0]) {
      b0: // addition
        sum = a+b;
        // overflow if (A and B positive but the result is negative) or
        // (A and B negative but the result is positive)
        v = (a[15] & b[15] & (~sum[15])) | ((~a[15]) & (~b[15]) & sum[15]);
      b1: // substraction
        sum = a-b;
        // overflow if (A (positive) minus B (negative) become negative) or
        // (A (negative) minus B (positive) become positive)
        v = (~a[15] & b[15] & sum[15]) | ((a[15]) & (~b[15]) & ~sum[15]);
      //b10: // multiplication
        //sum = a*b;
        
      default:
        sum = 16b0;
    }
    c = sum;
    z = ~|sum; // true when sum = 0
    n = sum[15]; // positive check
  }
}