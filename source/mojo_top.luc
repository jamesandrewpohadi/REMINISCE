module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    output spi_miso,        // AVR SPI MISO
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    output avr_rx,          // AVR RX (FPGA TX)
    input l1,
    input l2,
    input l3,
    input o,
    input u,
    input d,
    input l,
    input r,
    output x0,
    output x1,
    output x2,
    output x3,
    output x4,
    output x5,
    output x6,
    output x7,
    output y0,
    output y1,
    output y2,
    output y3,
    output y4,
    output y5,
    output y6,
    output y7
  ) {
  
  sig rst;                  // reset signal
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    edge_detector ud(#RISE(1), #FALL(0));
    button_conditioner uc;
    edge_detector dd(#RISE(1), #FALL(0));
    button_conditioner dc;
    edge_detector ld(#RISE(1), #FALL(0));
    button_conditioner lc;
    edge_detector rd(#RISE(1), #FALL(0));
    button_conditioner rc;
    edge_detector od(#RISE(1), #FALL(0));
    button_conditioner oc;
    edge_detector l1d(#RISE(1), #FALL(0));
    button_conditioner l1c;
    edge_detector l2d(#RISE(1), #FALL(0));
    button_conditioner l2c;
    edge_detector l3d(#RISE(1), #FALL(0));
    button_conditioner l3c;
    .rst(rst) {
      cu control_unit;
      emulator myGame; // define our device
    }
  }
  
  
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    uc.in = u;
    ud.in = uc.out;
    dc.in = d;
    dd.in = dc.out;
    lc.in = l;
    ld.in = lc.out;
    rc.in = r;
    rd.in = rc.out;
    oc.in = o;
    od.in = oc.out;
    l1c.in = l1;
    l1d.in = l1c.out;
    l2c.in = l2;
    l2d.in = l2c.out;
    l3c.in = l3;
    l3d.in = l3c.out;
    control_unit.udout = ud.out;
    control_unit.ddout = dd.out;
    control_unit.ldout = ld.out;
    control_unit.rdout = rd.out;
    control_unit.l1dout = l1d.out;
    control_unit.l2dout = l2d.out;
    control_unit.l3dout = l3d.out;
    control_unit.odout = od.out;
    control_unit.sqc = myGame.sqc;
    control_unit.lvl = myGame.lvl;
    control_unit.eq = myGame.eq;
    control_unit.display = myGame.display;
    myGame.wb = control_unit.wb;
    myGame.wl = control_unit.wb;
    myGame.ws = control_unit.wb;
    myGame.rstb = control_unit.wb;
    myGame.rstl = control_unit.rstl;
    myGame.rsts = control_unit.rsts;
    myGame.bsel = control_unit.bsel;
    myGame.asel = control_unit.asel;
    myGame.alufn = control_unit.alufn;
    x0 = myGame.x0;
    x1 = myGame.x1;
    x2 = myGame.x2;
    x3 = myGame.x3;
    x4 = myGame.x4;
    x5 = myGame.x5;
    x6 = myGame.x6;
    x7 = myGame.x7;
    y0 = myGame.y0;
    y1 = myGame.y1;
    y2 = myGame.y2;
    y3 = myGame.y3;
    y4 = myGame.y4;
    y5 = myGame.y5;
    y6 = myGame.y6;
    y7 = myGame.y7;
    led = myGame.eq[7:0];
    
  }
}