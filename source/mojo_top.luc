module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]
  ) {
  
  sig rst;                  // reset signal
  dff counter[38](.clk(clk), .rst(rst)); // Define the counter
  //dff myClk[1](.clk(clk), .rst(rst));
  //counter.q[25](.clk())
  .clk(counter.q[27]) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    dff counter2[28];
    reset_conditioner reset_cond;
    .rst(rst) {
      emulator myGame; // define our device
      //fsm state(#INIT(IDLE)) = {IDLE, CHECK, INCR, PRE_L, PRE_R, PRE_U, PRE_D, PRE_O, L, R, U, D, O, PRE_L1, L1, PRE_L2, L2, PRE_L3, L3, L1_DS1, L1_DS2, L1_DS3, L1_DS4, L1_DSW, L1_P1, L1_P2, L1_P3, L1_P4, L1_PW, DF};
    }
  }
  
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    myGame.wb = io_dip[0][0];
    myGame.wl = io_dip[0][1];
    myGame.ws = io_dip[0][2];
    myGame.rstb = io_dip[0][3];
    myGame.rstl = io_dip[0][4];
    myGame.rsts = io_dip[0][5];
    myGame.bsel = io_dip[0][6];
    myGame.asel = io_dip[1][2:0];
    myGame.alufn = io_dip[2][5:0];
    io_led[0][7:0] = counter.q[34:27];
    io_led[1] = 8b11110000;
    counter.d = counter.q+1;
  }
}