/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    output reg spi_miso,
    output reg [3:0] spi_channel,
    output reg avr_rx,
    input l1,
    input l2,
    input l3,
    input o,
    input u,
    input d,
    input l,
    input r,
    output reg x0,
    output reg x1,
    output reg x2,
    output reg x3,
    output reg x4,
    output reg x5,
    output reg x6,
    output reg x7,
    output reg y0,
    output reg y1,
    output reg y2,
    output reg y3,
    output reg y4,
    output reg y5,
    output reg y6,
    output reg y7
  );
  
  
  
  reg rst;
  
  reg [0:0] M_tl1_d, M_tl1_q = 1'h0;
  
  reg [0:0] M_tl2_d, M_tl2_q = 1'h0;
  
  reg [0:0] M_tl3_d, M_tl3_q = 1'h0;
  
  reg [0:0] M_tu_d, M_tu_q = 1'h0;
  
  reg [0:0] M_td_d, M_td_q = 1'h0;
  
  reg [0:0] M_tl_d, M_tl_q = 1'h0;
  
  reg [0:0] M_tr_d, M_tr_q = 1'h0;
  
  reg [0:0] M_to_d, M_to_q = 1'h0;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_ud_out;
  reg [1-1:0] M_ud_in;
  edge_detector_2 ud (
    .clk(clk),
    .in(M_ud_in),
    .out(M_ud_out)
  );
  wire [1-1:0] M_dd_out;
  reg [1-1:0] M_dd_in;
  edge_detector_2 dd (
    .clk(clk),
    .in(M_dd_in),
    .out(M_dd_out)
  );
  wire [1-1:0] M_ld_out;
  reg [1-1:0] M_ld_in;
  edge_detector_2 ld (
    .clk(clk),
    .in(M_ld_in),
    .out(M_ld_out)
  );
  wire [1-1:0] M_rd_out;
  reg [1-1:0] M_rd_in;
  edge_detector_2 rd (
    .clk(clk),
    .in(M_rd_in),
    .out(M_rd_out)
  );
  wire [1-1:0] M_od_out;
  reg [1-1:0] M_od_in;
  edge_detector_2 od (
    .clk(clk),
    .in(M_od_in),
    .out(M_od_out)
  );
  wire [1-1:0] M_l1d_out;
  reg [1-1:0] M_l1d_in;
  edge_detector_2 l1d (
    .clk(clk),
    .in(M_l1d_in),
    .out(M_l1d_out)
  );
  wire [1-1:0] M_l2d_out;
  reg [1-1:0] M_l2d_in;
  edge_detector_2 l2d (
    .clk(clk),
    .in(M_l2d_in),
    .out(M_l2d_out)
  );
  wire [1-1:0] M_l3d_out;
  reg [1-1:0] M_l3d_in;
  edge_detector_2 l3d (
    .clk(clk),
    .in(M_l3d_in),
    .out(M_l3d_out)
  );
  
  always @* begin
    M_to_d = M_to_q;
    M_tl_d = M_tl_q;
    M_tu_d = M_tu_q;
    M_td_d = M_td_q;
    M_tl3_d = M_tl3_q;
    M_tl2_d = M_tl2_q;
    M_tl1_d = M_tl1_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_ud_in = u;
    M_dd_in = d;
    M_ld_in = l;
    M_rd_in = r;
    M_od_in = o;
    M_l1d_in = l1;
    M_l2d_in = l2;
    M_l3d_in = l3;
    if (M_l1d_out) begin
      M_tl1_d = ~M_tl1_q;
    end
    led[0+0-:1] = M_tl1_q;
    if (M_l2d_out) begin
      M_tl2_d = ~M_tl2_q;
    end
    led[1+0-:1] = M_tl2_q;
    if (M_od_out) begin
      M_to_d = ~M_to_q;
    end
    led[7+0-:1] = M_to_q;
    if (M_l3d_out) begin
      M_tl3_d = ~M_tl3_q;
    end
    led[2+0-:1] = M_tl3_q;
    if (M_ud_out) begin
      M_tu_d = ~M_tu_q;
    end
    led[3+0-:1] = M_tu_q;
    if (M_ld_out) begin
      M_tl_d = ~M_tl_q;
    end
    led[5+0-:1] = M_tl_q;
    if (M_dd_out) begin
      M_td_d = ~M_td_q;
    end
    led[6+0-:1] = M_td_q;
    if (M_rd_out) begin
      M_td_d = ~M_td_q;
    end
    led[6+0-:1] = M_td_q;
    x0 = 1'h1;
    x1 = 1'h1;
    x2 = 1'h0;
    x3 = 1'h0;
    x4 = 1'h1;
    x5 = 1'h1;
    x6 = 1'h1;
    x7 = 1'h1;
    y0 = 1'h1;
    y1 = 1'h1;
    y2 = 1'h0;
    y3 = 1'h0;
    y4 = 1'h0;
    y5 = 1'h0;
    y6 = 1'h0;
    y7 = 1'h0;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_tl_q <= 1'h0;
    end else begin
      M_tl_q <= M_tl_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_tl3_q <= 1'h0;
    end else begin
      M_tl3_q <= M_tl3_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_tl2_q <= 1'h0;
    end else begin
      M_tl2_q <= M_tl2_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_tl1_q <= 1'h0;
    end else begin
      M_tl1_q <= M_tl1_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_tr_q <= 1'h0;
    end else begin
      M_tr_q <= M_tr_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_tu_q <= 1'h0;
    end else begin
      M_tu_q <= M_tu_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_to_q <= 1'h0;
    end else begin
      M_to_q <= M_to_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_td_q <= 1'h0;
    end else begin
      M_td_q <= M_td_d;
    end
  end
  
endmodule
