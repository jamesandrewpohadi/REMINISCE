/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module emulator_2 (
    input clk,
    input rst,
    input [5:0] alufn,
    input wb,
    input wl,
    input ws,
    input rstb,
    input rstl,
    input rsts,
    input bsel,
    input [2:0] asel,
    output reg [15:0] display,
    output reg [3:0] sqc,
    output reg [1:0] lvl,
    output reg [15:0] eq
  );
  
  
  
  wire [16-1:0] M_muxBoard_out;
  reg [16-1:0] M_muxBoard_a;
  reg [16-1:0] M_muxBoard_b;
  reg [1-1:0] M_muxBoard_sel;
  mux_2_3 muxBoard (
    .a(M_muxBoard_a),
    .b(M_muxBoard_b),
    .sel(M_muxBoard_sel),
    .out(M_muxBoard_out)
  );
  
  wire [16-1:0] M_muxLevel_out;
  reg [16-1:0] M_muxLevel_a;
  reg [16-1:0] M_muxLevel_b;
  reg [16-1:0] M_muxLevel_c;
  reg [16-1:0] M_muxLevel_d;
  reg [16-1:0] M_muxLevel_e;
  reg [3-1:0] M_muxLevel_sel;
  mux_5_4 muxLevel (
    .a(M_muxLevel_a),
    .b(M_muxLevel_b),
    .c(M_muxLevel_c),
    .d(M_muxLevel_d),
    .e(M_muxLevel_e),
    .sel(M_muxLevel_sel),
    .out(M_muxLevel_out)
  );
  
  wire [16-1:0] M_muxSequence_out;
  reg [16-1:0] M_muxSequence_a;
  reg [16-1:0] M_muxSequence_b;
  reg [1-1:0] M_muxSequence_sel;
  mux_2_3 muxSequence (
    .a(M_muxSequence_a),
    .b(M_muxSequence_b),
    .sel(M_muxSequence_sel),
    .out(M_muxSequence_out)
  );
  
  wire [16-1:0] M_muxA_out;
  reg [16-1:0] M_muxA_a;
  reg [16-1:0] M_muxA_b;
  reg [16-1:0] M_muxA_c;
  reg [16-1:0] M_muxA_d;
  reg [16-1:0] M_muxA_e;
  reg [3-1:0] M_muxA_sel;
  mux_5_4 muxA (
    .a(M_muxA_a),
    .b(M_muxA_b),
    .c(M_muxA_c),
    .d(M_muxA_d),
    .e(M_muxA_e),
    .sel(M_muxA_sel),
    .out(M_muxA_out)
  );
  
  wire [16-1:0] M_muxB_out;
  reg [16-1:0] M_muxB_a;
  reg [16-1:0] M_muxB_b;
  reg [1-1:0] M_muxB_sel;
  mux_2_3 muxB (
    .a(M_muxB_a),
    .b(M_muxB_b),
    .sel(M_muxB_sel),
    .out(M_muxB_out)
  );
  
  wire [16-1:0] M_myRom_out;
  reg [6-1:0] M_myRom_address;
  rom_8 myRom (
    .address(M_myRom_address),
    .out(M_myRom_out)
  );
  
  wire [16-1:0] M_myalu_c;
  wire [1-1:0] M_myalu_z;
  wire [1-1:0] M_myalu_v;
  wire [1-1:0] M_myalu_n;
  reg [16-1:0] M_myalu_a;
  reg [16-1:0] M_myalu_b;
  reg [6-1:0] M_myalu_alufn;
  alu_9 myalu (
    .a(M_myalu_a),
    .b(M_myalu_b),
    .alufn(M_myalu_alufn),
    .c(M_myalu_c),
    .z(M_myalu_z),
    .v(M_myalu_v),
    .n(M_myalu_n)
  );
  
  wire [16-1:0] M_board_out;
  reg [16-1:0] M_board_write;
  reg [16-1:0] M_board_value;
  register_10 board (
    .clk(clk),
    .rst(rst),
    .write(M_board_write),
    .value(M_board_value),
    .out(M_board_out)
  );
  wire [16-1:0] M_level_out;
  reg [16-1:0] M_level_write;
  reg [16-1:0] M_level_value;
  register_10 level (
    .clk(clk),
    .rst(rst),
    .write(M_level_write),
    .value(M_level_value),
    .out(M_level_out)
  );
  wire [16-1:0] M_sequence_out;
  reg [16-1:0] M_sequence_write;
  reg [16-1:0] M_sequence_value;
  register_10 sequence (
    .clk(clk),
    .rst(rst),
    .write(M_sequence_write),
    .value(M_sequence_value),
    .out(M_sequence_out)
  );
  
  always @* begin
    M_muxA_a = M_myRom_out;
    M_muxA_b = 16'h0001;
    M_muxA_c = 14'h3ee4;
    M_muxA_d = 16'h0660;
    M_muxA_e = 16'h0000;
    M_muxA_sel = asel;
    M_muxB_a = M_board_out;
    M_muxB_b = M_sequence_out;
    M_muxB_sel = bsel;
    M_myalu_a = M_muxA_out;
    M_myalu_b = M_muxB_out;
    M_myalu_alufn = alufn;
    eq = M_myalu_c;
    M_muxBoard_a = M_myalu_c;
    M_muxBoard_b = 16'h0000;
    M_muxBoard_sel = rstb;
    M_muxLevel_a = 16'h0000;
    M_muxLevel_b = 16'h0001;
    M_muxLevel_c = 16'h0002;
    M_muxLevel_d = 16'h0003;
    M_muxLevel_e = 16'h0000;
    M_muxLevel_sel = rstl;
    M_muxSequence_a = M_myalu_c;
    M_muxSequence_b = 16'h0000;
    M_muxSequence_sel = rsts;
    M_board_write = wb;
    M_board_value = M_muxBoard_out;
    M_level_write = wl;
    M_level_value = M_muxLevel_out;
    lvl = M_level_out[0+1-:2];
    M_sequence_write = ws;
    M_sequence_value = M_muxSequence_out;
    sqc = M_sequence_out[0+3-:4];
    M_myRom_address = {M_level_out[0+1-:2], M_sequence_out[0+3-:4]};
    display = M_board_out;
  end
endmodule
